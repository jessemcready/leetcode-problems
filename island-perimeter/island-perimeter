/* 
 2D int grid where 1's are land, 0's are water.  Connected only vertically or 
 horizontally. Grid is completely surrounded by water, has only one island, and
 the island has no lakes. One cell is square with side length 1.
*/

#include<vector>
#include<iostream>

int islandPerimeter(const std::vector<std::vector<int>> grid, int width, int height);
std::vector<std::vector<int>> createGrid(int width, int height);

int main() {
	int height, width, perimeter;

	std::vector<std::vector<int>> grid;
	
	std::cout << "What do you want the width of the grid to be?" << std::endl;
	std::cin >> width;
	if (width < 2) {
		std::cout << "Width must be greater than 1." << std::endl;
		std::cin.clear();
		std::cin.ignore(100000, '\n');
		std::cin >> width;
	}
	std::cout << "What do you want the height of the grid to be?" << std::endl;
	std::cin >> height;
	if (height < 2) {
		std::cout << "Height must be greater than 1." << std::endl;
		std::cin.clear();
		std::cin.ignore(100000, '\n');
		std::cin >> height;
	}
	grid = createGrid(width, height);
	perimeter = islandPerimeter(grid, width, height);
	std::cout << "Island perimeter is " << perimeter << std::endl;

	return 0;
}

int islandPerimeter(const std::vector<std::vector<int>> grid, int width, int height) {
	int perimeter = 0;

	// loop through matrix
	for (int i = 0; i < height; i++) {
		for (int j = 0; j < width; j++) {
			// if find a piece of land
			if (grid.at(j).at(i) == 1) {
				// if all the way to the left
				if (j == 0) {
					perimeter++;
					// if to top left
					if (i == 0) {
						perimeter++;
						// check to the right
						if (grid.at(j + 1).at(i) == 0) {
							perimeter++;
						}
						// check below
						if (grid.at(j).at(i + 1) == 0) {
							perimeter++;
						}
					}
					// if it's to bottom left
					else if (i == height - 1){
						// check right
						if (grid.at(j + 1).at(i) == 0) {
							perimeter++;
						}
						// check above
						if (grid.at(j).at(i - 1)) {
							perimeter++;
						}
					}
					// if it's only to the left, check above, below and right
					else {
						if (grid.at(j + 1).at(i) == 0) {
							perimeter++;
						}
						if (grid.at(j).at(i - 1) == 0) {
							perimeter++;
						}
						if (grid.at(j).at(i + 1) == 0) {
							perimeter++;
						}
					}
				}
				// if all the way to right
				else if (j == width - 1) {
					perimeter++;
					// if to top right
					if (i == 0) {
						perimeter++;
						// check to the left
						if (grid.at(j - 1).at(i) == 0) {
							perimeter++;
						}
						// check below
						if (grid.at(j).at(i + 1) == 0) {
							perimeter++;
						}
					}
					// if it's to bottom right
					else if (i == height - 1) {
						// check left
						if (grid.at(j - 1).at(i) == 0) {
							perimeter++;
						}
						// check above
						if (grid.at(j).at(i - 1)) {
							perimeter++;
						}
					}
					// if it's only on the right side
					else {
						// check left, above, below
						if (grid.at(j - 1).at(i) == 0) {
							perimeter++;
						}
						if (grid.at(j).at(i - 1) == 0) {
							perimeter++;
						}
						if (grid.at(j).at(i + 1) == 0) {
							perimeter++;
						}
					}
				}
				// if all the way to top
				else if (i == 0) {
					perimeter++;
					// if to top left
					if (j == 0) {
						perimeter++;
						// check to the right
						if (grid.at(j + 1).at(i) == 0) {
							perimeter++;
						}
						// check underneath
						if (grid.at(j).at(i + 1) == 0) {
							perimeter++;
						}
					}
					// if it's to top right
					else if (j == width - 1) {
						// check left
						if (grid.at(j - 1).at(i) == 0) {
							perimeter++;
						}
						// check below
						if (grid.at(j).at(i + 1)) {
							perimeter++;
						}
					}
					// if it's only on top
					else {
						// check left, right, bottom
						if (grid.at(j - 1).at(i) == 0) {
							perimeter++;
						} 
						if (grid.at(j + 1).at(i) == 0) {
							perimeter++;
						}
						if (grid.at(j).at(i + 1) == 0) {
							perimeter++;
						}
					}
				}
				// if all the way on bottom
				else if (i == height - 1) {
					perimeter++;
					// if to bottom left
					if (j == 0) {
						perimeter++;
						// check to the right
						if (grid.at(j + 1).at(i) == 0) {
							perimeter++;
						}
						// check above
						if (grid.at(j).at(i - 1) == 0) {
							perimeter++;
						}
					}
					// if it's to bottom right
					else if (j == width - 1) {
						// check left
						if (grid.at(j - 1).at(i) == 0) {
							perimeter++;
						}
						// check above
						if (grid.at(j).at(i - 1)) {
							perimeter++;
						}
					}
					// if only on bottom
					else {
						// check left, right, bottom
						if (grid.at(j - 1).at(i) == 0) {
							perimeter++;
						}
						if (grid.at(j + 1).at(i) == 0) {
							perimeter++;
						}
						if (grid.at(j).at(i + 1) == 0) {
							perimeter++;
						}
					}
				}
				// otherwise if not on an end, check everywhere
				else {
					// check left
					if (grid.at(j - 1).at(i) == 0) {
						perimeter++;
					}
					// check right
					if (grid.at(j + 1).at(i) == 0) {
						perimeter++;
					}
					// check above
					if (grid.at(j).at(i - 1) == 0) {
						perimeter++;
					}
					// check below
					if (grid.at(j).at(i + 1) == 0) {
						perimeter++;
					}
				}
			}
		}
	}

	return perimeter;
}

std::vector<std::vector<int>> createGrid(int width, int height) {
	std::vector<std::vector<int>> grid;
	int integerRepresentation;

	std::cout << "We will now fill in the grid left to right, top to bottom." << std::endl;
	for (int i = 0; i < height; i++) {
		std::vector<int> temp;
		for (int j = 0; j < width; j++) {
			std::cout << "Enter 1 for land or 0 for water at index (" << j
				<< ", " << i << ")" << std::endl;
			std::cin >> integerRepresentation;
			temp.push_back(integerRepresentation);
		}
		grid.push_back(temp);
	}
	return grid;
}
